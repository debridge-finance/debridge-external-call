/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_externalinstructionwrapper_free(a: number): void;
export function __wbg_externalinstructionwrapperiterator_free(a: number): void;
export function externalinstructionwrapperiterator_next(a: number): number;
export function externalinstructionwrapper_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number): void;
export function externalinstructionwrapper_expenses(a: number, b: number): void;
export function externalinstructionwrapper_set_expenses(a: number, b: number): void;
export function externalinstructionwrapper_instruction(a: number, b: number): void;
export function externalinstructionwrapper_set_instruction(a: number, b: number, c: number): void;
export function externalinstructionwrapper_close_spl_wallet(a: number, b: number, c: number): void;
export function externalinstructionwrapper_serialize(a: number, b: number): void;
export function wallet_placeholder(a: number): void;
export function auth_placeholder(a: number): void;
export function submission_placeholder(a: number): void;
export function __wbg_executecontext_free(a: number): void;
export function executecontext_remaning_accounts(a: number, b: number): void;
export function executecontext_reversed_subsitution_bumps(a: number): number;
export function get_external_call_instructions(a: number, b: number, c: number, d: number): void;
export function get_external_call_account_meta(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function __wbg_costcalculationinput_free(a: number): void;
export function __wbg_get_costcalculationinput_native_sender_len(a: number): number;
export function __wbg_set_costcalculationinput_native_sender_len(a: number, b: number): void;
export function __wbg_get_costcalculationinput_is_required_temp_rent_cost(a: number): number;
export function __wbg_set_costcalculationinput_is_required_temp_rent_cost(a: number, b: number): void;
export function __wbg_get_costcalculationinput_confirmation_count(a: number): number;
export function __wbg_set_costcalculationinput_confirmation_count(a: number, b: number): void;
export function __wbg_get_costcalculationinput_solana_rent_lamports_per_byte_year(a: number): number;
export function __wbg_set_costcalculationinput_solana_rent_lamports_per_byte_year(a: number, b: number): void;
export function __wbg_get_costcalculationinput_solana_exemption_threshold(a: number): number;
export function __wbg_set_costcalculationinput_solana_exemption_threshold(a: number, b: number): void;
export function __wbg_get_costcalculationinput_solana_signatures_rent(a: number): number;
export function __wbg_set_costcalculationinput_solana_signatures_rent(a: number, b: number): void;
export function __wbg_get_costcalculationinput_solana_nominal_price(a: number): number;
export function __wbg_set_costcalculationinput_solana_nominal_price(a: number, b: number): void;
export function __wbg_get_costcalculationinput_asset_nominal_price(a: number): number;
export function __wbg_set_costcalculationinput_asset_nominal_price(a: number, b: number): void;
export function __wbg_get_costcalculationinput_asset_decimals(a: number): number;
export function __wbg_set_costcalculationinput_asset_decimals(a: number, b: number): void;
export function __wbg_get_costcalculationinput_is_bridge_initialized(a: number): number;
export function __wbg_set_costcalculationinput_is_bridge_initialized(a: number, b: number): void;
export function __wbg_get_costcalculationinput_is_receiver_wallet_initialized(a: number): number;
export function __wbg_set_costcalculationinput_is_receiver_wallet_initialized(a: number, b: number): void;
export function __wbg_get_costcalculationinput_profitable_multiplier(a: number): number;
export function __wbg_set_costcalculationinput_profitable_multiplier(a: number, b: number): void;
export function __wbg_get_costcalculationinput_external_call_len(a: number, b: number): void;
export function __wbg_set_costcalculationinput_external_call_len(a: number, b: number, c: number): void;
export function costcalculationinput_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number, n: number): number;
export function costcalculationinput_calculate_sol_relative_price_with_profit(a: number): number;
export function costcalculationinput_calculate_recomended_claim_execution_fee(a: number): number;
export function costcalculationinput_calculate_recomended_reward_for_external_instruction(a: number, b: number): number;
export function costcalculationinput_calculate_recomended_reward_for_external_call(a: number, b: number, c: number): void;
export function __wbg_calculationerror_free(a: number): void;
export function externalinstructionwrapper_set_reward(a: number, b: number): void;
export function externalinstructionwrapper_reward(a: number): number;
export function __wbindgen_malloc(a: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number): number;
export const __wbindgen_export_2: WebAssembly.Table;
export function _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h4c6c1616b85e20a4(a: number, b: number, c: number): void;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number): void;
export function __wbindgen_exn_store(a: number): void;
export function wasm_bindgen__convert__closures__invoke2_mut__h3878fb7d760359b2(a: number, b: number, c: number, d: number): void;
